# # Create a security group for primary load balancer
# module "primary_sg_alb" {
#   providers = {
#     aws = aws.primary
#   }
#   source  = "terraform-aws-modules/security-group/aws"
#   version = "3.10.0"

#   name         = "primary_sg_alb"
#   description  = "SG for incoming Load Balancer traffic"
#   vpc_id       = var.primary_vpc_id
#   egress_rules = ["all-all"]
#   ingress_with_cidr_blocks = [
#     {
#       from_port   = var.alb_listener_port
#       to_port     = var.alb_listener_port
#       protocol    = "tcp"
#       description = "LB ports for Vault service"
#       cidr_blocks = var.alb_sg_cidr_block
#     }
#   ]
# }

# # Create a primary application load balancer
# module "primary_alb" {
#   providers = {
#     aws = aws.primary
#   }
#   source  = "terraform-aws-modules/alb/aws"
#   version = "5.6.0"

#   name_prefix                = "vault"
#   load_balancer_type         = "application"
#   vpc_id                     = var.primary_vpc_id
#   subnets                    = local.primary_public_subnet_ids
#   security_groups            = [module.primary_sg_alb.this_security_group_id]
#   enable_deletion_protection = false
#   enable_http2               = true
#   idle_timeout               = 60
#   internal                   = false
#   ip_address_type            = "ipv4"
#   tags                       = var.tags

#   target_groups = [
#     {
#       name_prefix      = "vault"
#       backend_protocol = var.vault_tls_disable == 1 ? "HTTP" : "HTTPS"
#       backend_port     = var.vault_port
#       target_type      = "instance"

#       health_check = {
#         enabled             = true
#         interval            = var.alb_health_check_interval
#         path                = var.vault_health_check_path
#         port                = tostring(var.vault_port)
#         healthy_threshold   = var.alb_health_check_healthy_threshold
#         unhealthy_threshold = var.alb_health_check_unhealthy_threshold
#         timeout             = var.alb_health_check_timeout
#         protocol            = var.vault_tls_disable == 1 ? "HTTP" : "HTTPS"
#         matcher             = var.alb_health_check_matcher
#       }

#       stickiness = {
#         enabled = var.alb_stickiness_enabled
#         type    = "lb_cookie"
#       }
#     }
#   ]

#   https_listeners = var.alb_listener_protocol == "HTTPS" ? [
#     {
#       port               = var.alb_listener_port
#       protocol           = var.alb_listener_protocol
#       certificate_arn    = aws_acm_certificate.primary_certificates[0].arn
#       target_group_index = 0
#     }
#   ] : []

#   http_tcp_listeners = var.alb_listener_protocol == "HTTP" ? [
#     {
#       port               = var.alb_listener_port
#       protocol           = var.alb_listener_protocol
#       action_type        = "forward"
#       target_group_index = 0
#     }
#   ] : []
# }

# # Attach the primary vault EC2 instances to this primary load balancer
# resource "aws_lb_target_group_attachment" "primary_tg_attachment" {
#   provider         = aws.primary
#   count            = local.primary_vault_num_nodes
#   target_group_arn = module.primary_alb.target_group_arns[0]
#   target_id        = module.primary_vault_ec2_instances.id[count.index]
#   port             = var.vault_port
#   depends_on       = [module.primary_vault_ec2_instances]
# }

# # Create a security group for secondary load balancer
# module "secondary_sg_alb" {
#   providers = {
#     aws = aws.secondary
#   }
#   source  = "terraform-aws-modules/security-group/aws"
#   version = "3.10.0"

#   create       = local.secondary_vault_num_nodes > 0 || var.secondary_vpc_id != null ? true : false
#   name         = "secondary_sg_alb"
#   description  = "SG for incoming Load Balancer traffic"
#   vpc_id       = var.secondary_vpc_id
#   egress_rules = ["all-all"]
#   ingress_with_cidr_blocks = [
#     {
#       from_port   = var.alb_listener_port
#       to_port     = var.alb_listener_port
#       protocol    = "tcp"
#       description = "LB ports for Vault service"
#       cidr_blocks = var.alb_sg_cidr_block
#     }
#   ]
# }

# # Create a secondary application load balancer
# module "secondary_alb" {
#   providers = {
#     aws = aws.secondary
#   }
#   source  = "terraform-aws-modules/alb/aws"
#   version = "5.6.0"

#   create_lb                  = local.secondary_vault_num_nodes > 0 || var.secondary_vpc_id != null ? true : false
#   name_prefix                = "vault"
#   load_balancer_type         = "application"
#   vpc_id                     = var.secondary_vpc_id
#   subnets                    = local.secondary_public_subnet_ids
#   security_groups            = [module.secondary_sg_alb.this_security_group_id]
#   enable_deletion_protection = false
#   enable_http2               = true
#   idle_timeout               = 60
#   internal                   = false
#   ip_address_type            = "ipv4"
#   tags                       = var.tags

#   target_groups = [
#     {
#       name_prefix      = "vault"
#       backend_protocol = var.vault_tls_disable == 1 ? "HTTP" : "HTTPS"
#       backend_port     = var.vault_port
#       target_type      = "instance"

#       health_check = {
#         enabled             = true
#         interval            = var.alb_health_check_interval
#         path                = var.vault_health_check_path
#         port                = tostring(var.vault_port)
#         healthy_threshold   = var.alb_health_check_healthy_threshold
#         unhealthy_threshold = var.alb_health_check_unhealthy_threshold
#         timeout             = var.alb_health_check_timeout
#         protocol            = var.vault_tls_disable == 1 ? "HTTP" : "HTTPS"
#         matcher             = var.alb_health_check_matcher
#       }

#       stickiness = {
#         enabled = var.alb_stickiness_enabled
#         type    = "lb_cookie"
#       }
#     }
#   ]

#   https_listeners = var.alb_listener_protocol == "HTTPS" ? [
#     {
#       port               = var.alb_listener_port
#       protocol           = var.alb_listener_protocol
#       certificate_arn    = aws_acm_certificate.secondary_certificates[0].arn
#       target_group_index = 0
#     }
#   ] : []

#   http_tcp_listeners = var.alb_listener_protocol == "HTTP" ? [
#     {
#       port               = var.alb_listener_port
#       protocol           = var.alb_listener_protocol
#       action_type        = "forward"
#       target_group_index = 0
#     }
#   ] : []
# }

# # Attach the secondary vault EC2 instances to this secondary load balancer
# resource "aws_lb_target_group_attachment" "secondary_tg_attachment" {
#   provider         = aws.secondary
#   count            = local.secondary_vault_num_nodes > 0 || var.secondary_vpc_id != null ? local.secondary_vault_num_nodes : 0
#   target_group_arn = module.secondary_alb.target_group_arns[0]
#   target_id        = module.secondary_vault_ec2_instances.id[count.index]
#   port             = var.vault_port
#   depends_on       = [module.secondary_vault_ec2_instances]
# }
